rbac:
  # Specifies whether RBAC resources should be created
  create: true
  # Specifies whether a PodSecurityPolicy should be created
  pspEnabled: true
serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

replicaCount: 1
image:
  repository: quay.io/prometheus/memcached-exporter
  tag: v0.9.0
  pullPolicy: IfNotPresent
extraArgs: {}

customLabels: {}

securityContext: {}

# Additional Environment variables
env: {}

service:
  type: ClusterIP
  port: 9150
  annotations:
    prometheus.io/path: /metrics
    prometheus.io/port: "9150"
    prometheus.io/scrape: "true"
  labels: {}
resources: {}

nodeSelector: {}

tolerations: []

affinity: {}

memcachedAddress: memcached:11211
annotations: {}
labels: {}
#  prometheus.io/path: /metrics
#  prometheus.io/port: "9121"
#  prometheus.io/scrape: "true"


serviceMonitor:
  # When set true then use a ServiceMonitor to configure scraping
  enabled: false
  # Set the namespace the ServiceMonitor should be deployed
  # namespace: monitoring
  # Set how frequently Prometheus should scrape
  # interval: 30s
  # Set path to memcached-exporter telemtery-path
  # telemetryPath: /metrics
  # Set labels for the ServiceMonitor, use this to define your scrape label for Prometheus Operator
  # labels:
  # Set timeout for scrape
  # timeout: 10s
  # Set relabel_configs as per https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
  # relabelings: []
  # Set of labels to transfer on the Kubernetes Service onto the target.
  # targetLabels: []
  # metricRelabelings: []

## Custom PrometheusRules to be defined
## The value is evaluated as a template, so, for example, the value can depend on .Release or .Chart
## ref: https://github.com/coreos/prometheus-operator#customresourcedefinitions
prometheusRule:
  enabled: false
  additionalLabels: {}
  namespace: ""
  rules: []


